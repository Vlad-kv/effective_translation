%{
    #include "../grammar_info.h"
    
    int yylex();
    void yyerror(char const *);
    
    extern grammar_info_builder input_grammar_result;
%}

%union {
    std::string *string_ptr_val;
    char char_val;
}

%token <string_ptr_val> WORD
%token <string_ptr_val> CPP_CODE

%token <char_val> CHAR_TOKEN

%token LEFT
%token RIGHT
%token LEX_ANALYSER_ERROR

%token SEPARATOR // %%

%type <string_ptr_val> token_symbol

%%
    input: CPP_CODE SEPARATOR tokens SEPARATOR operators SEPARATOR rules SEPARATOR;
    
    tokens: | token tokens;
    token:
        '<' WORD '>' token_symbol {
            input_grammar_result.add_token(move(*$4), move(*$2));
            delete $2;
            delete $4;
        }
      | token_symbol {
            input_grammar_result.add_token(move(*$1), "");
            delete $1;
        }
    ;
    operators: | operator operators;
    operator:
        LEFT token_symbol
      | RIGHT token_symbol
    ;
    rules: | rule rules;
    rule: WORD ':' rules_tail ';';
    rules_tail: 
        single_tail
      | single_tail '|' rules_tail
    ;
    single_tail:
        symbols
      | symbols CPP_CODE
    ;
    symbols:
        // empty
      | token_symbol symbols
    ;
    token_symbol:
        WORD { $$ = $1; }
      | CHAR_TOKEN { $$ = new std::string({'\'', $1}); }
    ;
%%
