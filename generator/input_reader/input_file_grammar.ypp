%{
    #include "../grammar_info.h"
    
    int yylex();
    void yyerror(char const *);
%}

%union {
    std::string *string_ptr_val;
    char char_val;
}

%token <string_ptr_val> WORD
%token <string_ptr_val> CPP_CODE

%token <char_val> CHAR_TOKEN

%token LEFT
%token RIGHT
%token LEX_ANALYSER_ERROR

%token SEPARATOR // %%

%%
    input: CPP_CODE SEPARATOR tokens SEPARATOR operators SEPARATOR rules SEPARATOR;
    
    tokens: | token tokens;
    token:
        '<' WORD '>' token_symbol {
            // TODO
        }
      | token_symbol
    ;
    operators: | operator operators;
    operator:
        LEFT token_symbol
      | RIGHT token_symbol
    ;
    rules: | rule rules;
    rule: WORD ':' rules_tail ';';
    rules_tail: 
        single_tail
      | single_tail '|' rules_tail
    ;
    single_tail:
        symbols
      | symbols CPP_CODE
    ;
    symbols:
        // empty
      | token_symbol symbols
    ;
    token_symbol:
        WORD
      | CHAR_TOKEN
    ;
%%
