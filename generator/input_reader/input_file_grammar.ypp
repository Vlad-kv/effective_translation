%{
    #include <algorithm>
    #include <vector>
    #include "../grammar_info.h"
    
    int yylex();
    void yyerror(char const *);
    
    extern grammar_info_builder input_grammar_result;
    
    typedef std::pair<std::vector<std::string>, std::string> single_tail_t;
    typedef std::vector<single_tail_t> rules_tail_t;
%}

%union {
    std::string *string_ptr_val;
    char char_val;
    std::vector<std::string> *str_vector_ptr_val;
    single_tail_t *single_tail_ptr_val;
    rules_tail_t *rules_tail_ptr_val;
}

%token <string_ptr_val> WORD
%token <string_ptr_val> CPP_CODE

%token <char_val> CHAR_TOKEN

%token LEFT
%token RIGHT
%token LEX_ANALYSER_ERROR

%token SEPARATOR         // %%
%token USER_DECLARATIONS // %%user_declarations
%token UNION_VALUES      // %%union_values
%token TOKENS            // %%tokens
%token OPERATORS         // %%operators
%token NOT_TERMINALS     // %%not_terminals

%type <string_ptr_val> token_symbol
%type <str_vector_ptr_val> symbols
%type <single_tail_ptr_val> single_tail
%type <rules_tail_ptr_val> rules_tail

%%
    input: USER_DECLARATIONS CPP_CODE
           UNION_VALUES      CPP_CODE
           TOKENS            tokens
           OPERATORS         operators
           NOT_TERMINALS     not_terminals
           SEPARATOR         rules
           SEPARATOR {
        std::string *code = $2, *union_values = $4;
        
        input_grammar_result.add_code(std::move(*code));
        delete code;
        
        input_grammar_result.add_union_values(std::move(*union_values));
        delete union_values;
    };
    
    tokens: | token tokens;
    token:
        '<' WORD '>' token_symbol {
            input_grammar_result.add_token(move(*$4), move(*$2));
            delete $2;
            delete $4;
        }
      | token_symbol {
            input_grammar_result.add_token(move(*$1), "");
            delete $1;
        }
    ;
    operators: | operator operators;
    operator:
        LEFT token_symbol {
            input_grammar_result.add_operator(*$2, grammar_info::associativity::left);
            delete $2;
        }
      | RIGHT token_symbol {
            input_grammar_result.add_operator(*$2, grammar_info::associativity::right);
            delete $2;
        }
    ;
    not_terminals: | not_terminal not_terminals
    not_terminal: '<' WORD '>' WORD {
        input_grammar_result.add_not_terminal(*$2, *$4);
        delete $2;
        delete $4;
    }
    rules: | rule rules;
    rule: WORD ':' rules_tail ';' {
        for (single_tail_t& w : *$3) {
            input_grammar_result.add_rule(*$1, std::move(w.first), std::move(w.second), ""); // TODO
        }
        delete $1;
        delete $3;
    };
    rules_tail:
        single_tail {
            $$ = new rules_tail_t({std::move(*$1)});
            delete $1;
        }
      | single_tail '|' rules_tail {
            $$ = $3;
            $$->push_back(std::move(*$1));
            delete $1;
      }
    ;
    single_tail:
        symbols {
            std::reverse($1->begin(), $1->end());
            $$ = new single_tail_t({std::move(*$1), ""});
            delete $1;
        }
      | symbols CPP_CODE {
            std::reverse($1->begin(), $1->end());
            $$ = new single_tail_t({std::move(*$1), *$2});
            delete $1;
            delete $2;
      }
    ;
    symbols:
        // empty
        { $$ = new std::vector<std::string>(); }
      | token_symbol symbols {
            $$ = $2;
            $$->push_back(std::move(*$1));
            delete $1;
      }
    ;
    token_symbol:
        WORD { $$ = $1; }
      | CHAR_TOKEN { $$ = new std::string({'\'', $1}); }
    ;
%%
