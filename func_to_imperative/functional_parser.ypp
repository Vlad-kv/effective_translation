%{
    #include <ctype.h>
    #include <math.h>
    #include <string>

    int yylex ();
    void yyerror (char const *);
%}

%union {
    double double_val;
    int int_val;
    
    std::string* str_ptr_val;
}

%token <double_val> NUM
%token <str_ptr_val> VAR_NAME

%type <double_val> exp
%type <double_val> line


%left '-' '+'
%left '*' '/'

%left NEG /* negation--unary minus */
%right '^' /* exponentiation */

%% /* The grammar follows. */

    input: // empty
        | input line
    ;
    line: '\n'
        | exp '\n' { printf ("\t%.10g\n", $1); }
    ;
    exp: NUM { $$ = $1; }
        | exp '*' exp { $$ = $1 * $3; }

        | exp '+' exp { $$ = $1 + $3; }
        | exp '-' exp { $$ = $1 - $3; }
        
        | exp '/' exp { $$ = $1 / $3; }
        | '-' exp %prec NEG { $$ = -$2; }
        | exp '^' exp { $$ = pow ($1, $3); }
        | '(' exp ')' { $$ = $2; }
    ;
/*
global_scope :
    | definition
;
    

definition :
    LET 
*/
%%
