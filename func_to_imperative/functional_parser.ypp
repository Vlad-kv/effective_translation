%{
    #include <cstdio>
    #include <ctype.h>
    #include <math.h>
    #include <iomanip>
    
    #include <vector>
    #include <string>
    #include <list>
    
    using namespace std;
    
    #include "parser.h"
    #include "functional_grammar.h"
    #include "translation.h"
    
    int yylex();
    void yyerror(char const *);
%}

%union {
    double double_val;
    int int_val;
    
    string *string_ptr_val;
    vector<string> *str_vector_ptr_val;
    
    f_type *f_type_ptr_val;
    
    list<pair<string, int>> *source_code_ptr_val;
    //pair< *list<pair<string, int>>, *f_type> *code_and_type_val;
}

%token <int_val> INT_NUM
%token <string_ptr_val> VAR_NAME
%token <string_ptr_val> STRING_CONSTANT

%token DOUBLE_SEMICOLON

%token LET
%token IN
%token REC
%token NOT

%token FUN
%token IF
%token THEN
%token ELSE
%token BEGIN
%token END

%token UNIT
%token INT
%token STRING
%token BOOL

%token TRUE
%token FALSE

%token UNFINISHED_STRING

%type <str_vector_ptr_val> var_arguments
%type <f_type_ptr_val> type

%type <source_code_ptr_val> global_terms
%type <source_code_ptr_val> term
%type <source_code_ptr_val> term_seq

%right ARROW

%left '<' '>'
%left OR
%left AND

%left '-' '+'
%left '*' '/' MOD

%left NEG /* negation--unary minus */
%left '^' /* string concatenation */

%left APPLICATION

%% /* The grammar follows. */
    input : global_terms {
        global_result = $1;
    }
    ;
    global_terms:
          /* empty */ {
            $$ = new source_code_t();
          }
        | global_terms global_let_expression {
            $$ = $1;
        }
        | global_terms term_seq DOUBLE_SEMICOLON {
            $$ = $1;
            $$->splice($$->end(), *$2);
            delete $2;
            
            $$->back().first.push_back(';');
        }
    ;
    let_declaration:
        VAR_NAME ':' type '=' let_definition {
            f_type_sp t($3);
            
            *output_stream << "definition:\n"
                << "  VAR_NAME: " << *$1 << "\n"
                << "  type: " << to_string(t) << "\n";
            delete $1;
        }
    ;
    let_definition:
          FUN var_arguments ARROW term_seq {
          }
        | term_seq
    ;
    let_expression:
          LET let_declaration
        | LET REC let_declaration
    ;
    global_let_expression:
        let_expression DOUBLE_SEMICOLON {
        }
    ;
    local_let_expression:
        let_expression IN {
        }
    ;
    if_expr:
          IF term THEN term if_else
    ;
    if_else:
          // empty
        | ELSE term
    ;
    type:
          UNIT     { $$ = new f_type(nullptr, nullptr, "unit"  ); }
        | INT      { $$ = new f_type(nullptr, nullptr, "int"   ); }
        | STRING   { $$ = new f_type(nullptr, nullptr, "string"); }
        | BOOL     { $$ = new f_type(nullptr, nullptr, "bool"  ); }
        | type ARROW type {
            $$ = new f_type(f_type_sp($1), f_type_sp($3));
          }
        | '(' type ')' { $$ = $2; }
    ;
    term_seq:
          term { $$ = $1; }
        | term ';' term_seq {
            $$ = $3;
            $1->back().first.push_back(';');
            $$->splice($$->begin(), *$1);
            delete $1;
        }
    term:
          '(' ')' // unit
        | '(' term ')'  { $$ = $2; }
        | VAR_NAME
        | term '+' term { $$ = concatenate_terms_with_operator($1, "+", $3); }
        | term '-' term { $$ = concatenate_terms_with_operator($1, "-", $3); }
        | term '*' term { $$ = concatenate_terms_with_operator($1, "*", $3); }
        | term '/' term { $$ = concatenate_terms_with_operator($1, "/", $3); }
        | term '^' term { $$ = concatenate_terms_with_operator($1, "+", $3); }
        | term MOD term { $$ = concatenate_terms_with_operator($1, "+", $3); }
        | term term %prec APPLICATION
        | INT_NUM { $$ = new source_code_t({{to_string($1), 0}}); }
        | local_let_expression term
        | STRING_CONSTANT {
            $$ = new source_code_t({{move(*$1), 0}});
            delete $1;
        }
        | BEGIN term_seq END {
            $$ = $2;
            $$->push_front({"{", 1});
            $$->back().first.push_back(';');
            $$->back().second--;
            $$->push_back({"}", 0});
        }
        | if_expr
        | term AND term { $$ = concatenate_terms_with_operator($1, "&&", $3); }
        | term OR  term { $$ = concatenate_terms_with_operator($1, "||", $3); }
        | NOT term { $$ = concatenate_term_with_unary_operator("!", $2); }
        | TRUE  { $$ = new source_code_t({{"true" , 0}}); }
        | FALSE { $$ = new source_code_t({{"false", 0}}); }
    ;
    var_arguments:
          VAR_NAME {
            $$ = new vector<string>({*$1});
            delete $1;
        }
        | var_arguments VAR_NAME {
            $1->push_back(move(*$2));
            $$ = $1;
            delete $2;
        }
    ;
%%
