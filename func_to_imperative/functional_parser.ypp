%{
    #include <cstdio>
    #include <ctype.h>
    #include <math.h>
    #include <iomanip>
    
    #include <vector>
    #include <string>
    #include <list>
    
    using namespace std;
    
    #include "parser.h"
    #include "functional_grammar.h"
    #include "translation.h"
    
    int yylex();
    void yyerror(char const *);
%}

%union {
    double double_val;
    int int_val;
    
    string *string_ptr_val;
    vector<string> *str_vector_ptr_val;
    
    f_type *f_type_ptr_val;
    
    source_code_t *source_code_ptr_val;
    code_and_type_t *code_and_type_val;
    
    
    term *term_ptr_val;
    term_seq *term_seq_ptr_val;
    
    let_definition *let_definition_ptr_val;
}

%token <int_val> INT_NUM
%token <string_ptr_val> VAR_NAME
%token <string_ptr_val> STRING_CONSTANT

%token DOUBLE_SEMICOLON

%token LET
%token IN
%token REC
%token NOT

%token FUN
%token IF
%token THEN
%token ELSE
%token BEGIN
%token END

%token UNIT
%token INT
%token STRING
%token BOOL

%token TRUE
%token FALSE

%token UNFINISHED_STRING


%type <str_vector_ptr_val> var_arguments
%type <f_type_ptr_val> type

%type <term_seq_ptr_val> global_terms
%type <term_ptr_val> term
%type <term_ptr_val> term_app
%type <term_seq_ptr_val> term_seq

%type <term_ptr_val> if_expr
%type <term_ptr_val> if_else

%type <let_definition_ptr_val> let_definition
%type <let_definition_ptr_val> let_expression
%type <let_definition_ptr_val> global_let_expression
%type <let_definition_ptr_val> local_let_expression

%right ARROW

%left APPLICATION

%left '=' NOT_EQUAL

%left '<' LESS_OR_EQUAL '>' MORE_OR_EQUAL
%left OR
%left AND

%left '-' '+'
%left '*' '/' MOD

%left NEG /* negation--unary minus */
%left '^' /* string concatenation */

%% /* The grammar follows. */
    input : global_terms { global_result = term_seq_sp($1); }
    ;
    global_terms:
            //empty 
            {
            $$ = new term_seq();
          }
        | global_terms global_let_expression {
            $$ = $1;
            $$->terms.push_back(let_definition_sp($2));
        }
        | global_terms term_seq DOUBLE_SEMICOLON {
            $$ = $1;
            move($2->terms.begin(), $2->terms.end(), back_inserter($$->terms));
            delete $2;
        }
    ;
    let_definition:
        VAR_NAME ':' type '=' FUN var_arguments ARROW term_seq {
            $$ = new let_definition(false, *$1, move(*$6), f_type_sp($3), term_seq_sp($8));
            delete $1;
            delete $6;
        }
        | VAR_NAME ':' type '=' term_seq {
            $$ = new let_definition(false, *$1, vector<string>(), f_type_sp($3), term_seq_sp($5));
            delete $1;
        }
    ;
    let_expression:
          LET let_definition {
            $$ = $2;
        }
        | LET REC let_definition {
            $3->is_rec = true;
            $$ = $3;
        }
    ;
    global_let_expression:
        let_expression DOUBLE_SEMICOLON { $$ = $1; }
    ;
    local_let_expression:
        let_expression IN { $$ = $1; }
    ;
    if_expr:
          IF term_app THEN term_app if_else {
              $$ = new term({term_sp($2), term_sp($4), term_sp($5)}, $2->type);
          }
    ;
    if_else:
          // empty
          { $$ = new term(real_term({nullptr, "", nullptr}), f_type::create("unit"));; }
        | ELSE term_app {
            $$ = $2;
        }
    ;
    type:
          UNIT     { $$ = new f_type(nullptr, nullptr, "unit"  ); }
        | INT      { $$ = new f_type(nullptr, nullptr, "int"   ); }
        | STRING   { $$ = new f_type(nullptr, nullptr, "string"); }
        | BOOL     { $$ = new f_type(nullptr, nullptr, "bool"  ); }
        | type ARROW type {
            $$ = new f_type(f_type_sp($1), f_type_sp($3));
          }
        | '(' type ')' { $$ = $2; }
    ;
    term_seq:
          term_app {
            $$ = new term_seq({term_sp($1)});
        }
        | term_seq ';' term_app {
            $$ = $1;
            $$->terms.push_back(term_sp($3));
        }
    ;
    term_app:
          term {
            $$ = $1;
        }
        | term_app term %prec APPLICATION {
            $$ = new term({term_sp($1), "APP", term_sp($2)}, nullptr);
        }
    ;
    term:
          '(' ')'  { $$ = new term(real_term({nullptr, "", nullptr}), f_type::create("unit")); }
        | '(' term_app ')'  { $$ = $2; }
        | VAR_NAME {
            $$ = new term({move(*$1)}, nullptr);
            delete $1;
        }
        | term '+' term { $$ = new term({term_sp($1), "+", term_sp($3)}, f_type::create("int")); }
        | term '-' term { $$ = new term({term_sp($1), "-", term_sp($3)}, f_type::create("int")); }
        | term '*' term { $$ = new term({term_sp($1), "*", term_sp($3)}, f_type::create("int")); }
        | term '/' term { $$ = new term({term_sp($1), "/", term_sp($3)}, f_type::create("int")); }
        | term '^' term { $$ = new term({term_sp($1), "^", term_sp($3)}, f_type::create("string")); }
        | term MOD term { $$ = new term({term_sp($1), "%", term_sp($3)}, f_type::create("int")); }
        
        | INT_NUM { $$ = new term(real_term({nullptr, to_string($1), nullptr}), f_type::create("int")); }
        | local_let_expression term_seq {
            vector<variant<term_sp, let_definition_sp>> new_v({let_definition_sp($1)});
            for (variant<term_sp, let_definition_sp> &w : $2->terms) {
                new_v.push_back(move(w));
            }
            $2->terms = move(new_v);
            
            $$ = new term({term_seq_sp($2)}, nullptr);
        }
        | STRING_CONSTANT {
            $$ = new term(real_term({nullptr, move(*$1), nullptr}), f_type::create("string"));
            delete $1;
        }
        | BEGIN term_seq END {
            $$ = new term({term_seq_sp($2)}, nullptr);
        }
        | if_expr { $$ = $1; }
        | term AND term { $$ = new term({term_sp($1), "&&", term_sp($3)}, f_type::create("bool")); }
        | term OR  term { $$ = new term({term_sp($1), "||", term_sp($3)}, f_type::create("bool")); }
        
        | term '='            term { $$ = new term({term_sp($1), "==", term_sp($3)}, f_type::create("bool")); }
        | term NOT_EQUAL      term { $$ = new term({term_sp($1), "!=", term_sp($3)}, f_type::create("bool")); }
        | term LESS_OR_EQUAL  term { $$ = new term({term_sp($1), "<=", term_sp($3)}, f_type::create("bool")); }
        | term MORE_OR_EQUAL  term { $$ = new term({term_sp($1), ">=", term_sp($3)}, f_type::create("bool")); }
        
        | NOT term { $$ = new term(real_term({nullptr, "not", term_sp($2)}), f_type::create("bool")); }
        | TRUE  { $$ = new term(real_term({nullptr, "true", nullptr}), f_type::create("bool")); }
        | FALSE { $$ = new term(real_term({nullptr, "false", nullptr}), f_type::create("bool")); }
    ;
    var_arguments:
          VAR_NAME {
            $$ = new vector<string>({*$1});
            delete $1;
        }
        | var_arguments VAR_NAME {
            $1->push_back(move(*$2));
            $$ = $1;
            delete $2;
        }
    ;
%%
